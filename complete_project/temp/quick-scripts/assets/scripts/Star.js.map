{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","speed","getWallDistance","playerPos","game","stone","getPosition","dist","node","position","sub","mag","onPicked","gainScore","destroy","update","dt","console","log","y","height"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY,EAFJ;AAGRC,eAAO;AAHC,KAHP;;AASLC,qBAAiB,2BAAY;AACzB;AACA;AACA,YAAIC,YAAY,KAAKC,IAAL,CAAUC,KAAV,CAAgBC,WAAhB,EAAhB;AACA;AACA;AACA;AACA,YAAIC,OAAO,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACA,eAAOJ,IAAP;AACH,KAlBI;;AAoBLK,cAAU,oBAAW;AACjB;AACA;AACA;AACA,aAAKR,IAAL,CAAUS,SAAV;AACA;AACA,aAAKL,IAAL,CAAUM,OAAV;AACA,aAAKV,IAAL,CAAUC,KAAV,CAAgBS,OAAhB;AACH,KA5BI;;AA8BLC,YAAQ,gBAAUC,EAAV,EAAc;AAClB,YAAIT,OAAO,KAAKL,eAAL,EAAX;AACA;AACA,YAAIK,OAAO,KAAKP,UAAhB,EAA4B;AACxBiB,oBAAQC,GAAR,CAAY,eAAZ;AACA;AACA,iBAAKN,QAAL;AACA;AACH;AACD,aAAKJ,IAAL,CAAUW,CAAV,IAAe,KAAKlB,KAAL,GAAae,EAA5B;AACA,YAAI,KAAKR,IAAL,CAAUW,CAAV,GAAc,KAAKf,IAAL,CAAUI,IAAV,CAAeY,MAAf,GAAwB,CAA1C,EAA6C;AACzC,iBAAKZ,IAAL,CAAUM,OAAV;AACH;AACJ;AA3CI,CAAT","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n    \n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 30,\n        speed: 80,\n    },\n\n    getWallDistance: function () {\n        // 根据 player 节点位置判断距离\n        // console.log(this.game.node);\n        var playerPos = this.game.stone.getPosition();\n        // console.log(playerPos)\n        // console.log(this.node.position);\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n\n    onPicked: function() {\n        // // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        // this.game.spawnNewStar();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n        this.game.stone.destroy();\n    },\n\n    update: function (dt) {\n        let dist = this.getWallDistance();        \n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (dist < this.pickRadius) {\n            console.log('-------------');\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        this.node.y += this.speed * dt;\n        if (this.node.y > this.game.node.height / 2) {\n            this.node.destroy();\n        }\n    },\n});\n"]}